{"version":3,"sources":["components/TodoItem.js","components/TodoList.js","components/TodoInput.js","App.js","serviceWorker.js","index.js"],"names":["TodoItem","Component","TodoList","this","props","items","clearList","handleDelete","handleEdit","className","map","item","index","key","id","title","type","onClick","TodoInput","handleSubmit","handleChange","editItem","onSubmit","placeholder","value","onChange","App","state","uuid","e","setState","target","preventDefault","newItem","updatedItems","console","log","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"0RAEqBA,E,iLAEb,OACI,6BACI,yC,GAJsBC,aCyBvBC,G,uLAtBD,IAAD,EACgDC,KAAKC,MAAnDC,EADF,EACEA,MAAOC,EADT,EACSA,UAAWC,EADpB,EACoBA,aAAcC,EADlC,EACkCA,WACvC,OACI,iCACI,wBAAIC,UAAU,mBACV,wBAAIA,UAAU,gCACTJ,EAAMK,KAAI,SAACC,EAAMC,GACd,OACI,kBAAC,EAAD,CACIC,IAAKF,EAAKG,GACVC,MAAOJ,EAAKI,MACZR,aAAc,kBAAMA,EAAaI,EAAKG,KACtCN,WAAY,kBAAMA,EAAWG,EAAKG,UAG9C,4BAAQE,KAAK,SAASP,UAAU,0CAA0CQ,QAASX,GAAnF,oB,GAhBDL,cC+BRiB,G,uLA/BD,IAAD,EACiDf,KAAKC,MAApDC,EADF,EACEA,MAAOc,EADT,EACSA,aAAwBC,GADjC,EACuBC,SADvB,EACiCD,cAEtC,OACI,yBAAKX,UAAW,uBACZ,0BAAMa,SAAUH,GACZ,yBAAKV,UAAW,eACZ,yBAAKA,UAAW,uBACZ,yBAAKA,UAAW,0CACZ,uBAAGA,UAAU,kBAGrB,2BACIO,KAAK,OACLP,UAAU,+BACVc,YAAY,YACZC,MAAOnB,EACPoB,SAAUL,KAGlB,4BACIJ,KAAK,SACLP,UAAU,kCAFd,a,GArBIR,cCuETyB,G,iNAlEXC,MAAQ,CACJtB,MAAO,GACPS,GAAIc,MACJjB,KAAM,GACNU,UAAU,G,EAEdD,aAAe,SAACS,GAEZ,EAAKC,SAAS,CACVnB,KAAMkB,EAAEE,OAAOP,S,EAGvBL,aAAe,SAACU,GAEZA,EAAEG,iBACF,IAAMC,EAAU,CACZnB,GAAI,EAAKa,MAAMb,GACfC,MAAO,EAAKY,MAAMhB,MAEhBuB,EAAY,sBAAO,EAAKP,MAAMtB,OAAlB,CAAyB4B,IAC3C,EAAKH,SAAS,CACVzB,MAAO6B,EACPvB,KAAM,GACNG,GAAIc,MACJP,UAAU,IAEV,kBAAKc,QAAQC,IAAI,EAAKT,W,EAG9BrB,UAAY,WAER6B,QAAQC,IAAI,e,EAEhB7B,aAAe,SAACO,GAEZqB,QAAQC,IAAR,wBAA6BtB,K,EAEjCN,WAAa,SAACM,GAEVqB,QAAQC,IAAR,sBAA2BtB,K,wEAG3B,OACI,yBAAKL,UAAW,aACZ,yBAAKA,UAAU,OACX,yBAAKA,UAAW,gCACZ,wBAAIA,UAAW,+BAAf,eACA,kBAAC,EAAD,CACIE,KAAMR,KAAKwB,MAAMtB,MACjBe,aAAcjB,KAAKiB,aACnBD,aAAchB,KAAKgB,aACnBE,SAAUlB,KAAKK,aAEnB,kBAAC,EAAD,CACIH,MAAOF,KAAKwB,MAAMtB,MAClBC,UAAWH,KAAKG,UAChBC,aAAcJ,KAAKI,aACnBC,WAAYL,KAAKK,oB,GA1D3BP,cCKEoC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLlB,QAAQkB,MAAMA,EAAMC,c","file":"static/js/main.2d954fbc.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\n\r\nexport default class TodoItem extends Component{\r\n    render() {\r\n        return(\r\n            <div>\r\n                <h5>item</h5>\r\n            </div>\r\n        )\r\n    }\r\n}","import React, {Component} from 'react';\r\nimport TodoItem from './TodoItem'\r\nimport '../../node_modules/bootstrap/dist/css/bootstrap.min.css';\r\n\r\nclass TodoList extends Component {\r\n    render() {\r\n        const {items, clearList, handleDelete, handleEdit} = this.props;\r\n        return (\r\n            <section>\r\n                <ul className=\"list-group my-5\">\r\n                    <h3 className=\"text-capitalize text-center\"/>\r\n                        {items.map((item, index) => {\r\n                            return (\r\n                                <TodoItem\r\n                                    key={item.id}\r\n                                    title={item.title}\r\n                                    handleDelete={() => handleDelete(item.id)}\r\n                                    handleEdit={() => handleEdit(item.id)}\r\n                                />)\r\n                        })}\r\n                        <button type=\"button\" className=\"btn btn-danger btn-block text-uppercase\" onClick={clearList}>clear list</button>\r\n                </ul>\r\n            </section>\r\n        )\r\n    }\r\n}\r\n\r\nexport default TodoList;","import React, {Component} from 'react';\r\nimport '../../node_modules/font-awesome/css/font-awesome.min.css';\r\n\r\nclass TodoInput extends Component {\r\n    render() {\r\n        const {items, handleSubmit, editItem, handleChange} = this.props;\r\n\r\n        return (\r\n            <div className={\"card card-body my-3\"}>\r\n                <form onSubmit={handleSubmit}>\r\n                    <div className={\"input-group\"}>\r\n                        <div className={\"input-group-prepend\"}>\r\n                            <div className={\"input-group-text bg-primary text-white\"}>\r\n                                <i className=\"fas fa-book\"/>\r\n                            </div>\r\n                        </div>\r\n                        <input\r\n                            type=\"text\"\r\n                            className=\"form-control text-capitalize\"\r\n                            placeholder=\"Add Items\"\r\n                            value={items}\r\n                            onChange={handleChange}\r\n                        />\r\n                    </div>\r\n                    <button\r\n                        type=\"submit\"\r\n                        className=\"btn btn-block btn-primary mt-3\">\r\n                        Add\r\n                    </button>\r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default TodoInput;","import React, {Component} from 'react';\nimport uuid from 'uuid';\nimport TodoList from \"./components/TodoList\";\nimport TodoInput from \"./components/TodoInput\"\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css'\nimport './App.css';\n\nclass App extends Component {\n    state = {\n        items: [],\n        id: uuid(),\n        item: \"\",\n        editItem: false,\n    };\n    handleChange = (e) =>\n    {\n        this.setState({\n            item: e.target.value\n        })\n    };\n    handleSubmit = (e) =>\n    {\n        e.preventDefault();\n        const newItem = {\n            id: this.state.id,\n            title: this.state.item,\n        };\n        const updatedItems = [...this.state.items, newItem];\n        this.setState({\n            items: updatedItems,\n            item: '',\n            id: uuid(),\n            editItem: true,\n        },\n            ()=> console.log(this.state),\n        );\n    };\n    clearList = () =>\n    {\n        console.log('clear list');\n    };\n    handleDelete = (id) =>\n    {\n        console.log(`handle delete ${id}`);\n    };\n    handleEdit = (id) =>\n    {\n        console.log(`handle edit ${id}`);\n    };\n    render() {\n        return (\n            <div className={\"container\"}>\n                <div className=\"row\">\n                    <div className={\"col-10 mx-auto col-md-8 mt-5\"}>\n                        <h3 className={\"text-capitalize text-center\"}> todo input</h3>\n                        <TodoInput\n                            item={this.state.items}\n                            handleChange={this.handleChange}\n                            handleSubmit={this.handleSubmit}\n                            editItem={this.handleEdit}\n                        />\n                        <TodoList\n                            items={this.state.items}\n                            clearList={this.clearList}\n                            handleDelete={this.handleDelete}\n                            handleEdit={this.handleEdit}\n                        />\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}